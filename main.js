/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("(function displayWeather() {\n  /*Variables declaration */\n  const containerForm = document.querySelector('[container-form]');\n  const userEntry = document.querySelector('[new-entry]');\n  const toggleSwitch = document.querySelector('[switch]');\n  const locButton = document.querySelector('[location-button]');\n  const apiKey = '1fc46f4c843efde5b251461614294652';\n  let input = 'New York';\n  let searchTerm;\n\n\n\n  /*Event Listeners for Location and user input */\n  locButton.addEventListener('click', (event) => {\n    event.preventDefault();\n    const successCallback = (location) => {\n      let userLocation = `${\n        'lat=' + location.coords.latitude + '&lon=' + location.coords.longitude\n      }`;\n      getWeather(userLocation);\n    };\n    const errorCallback = (error) => {\n      alert(error);\n    };\n    navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\n  });\n\n  containerForm.addEventListener('submit', (event) => {\n    event.preventDefault();\n    input = userEntry.value;\n\n    getWeather(input);\n    clear();\n  });\n\n  /*Async Function fetching API */\n  async function getWeather(input) {\n    typeOfQuery(input);\n    try {\n      const response = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?${searchTerm}&appid=${apiKey}&units=standard`,\n        { mode: 'cors' }\n      );\n      const data = await response.json();\n      displayWeather(data);\n    } catch (err) {\n      alert(err);\n    }\n  }\n\n  /*Render Weather function*/\n  function displayWeather(data) {\n    /* Set background depending on weather*/\n    switch (data.weather[0].main) {\n      case 'Clear':\n        document.body.style.backgroundImage = 'url(\"clear.jpg\")';\n        break;\n      case 'Clouds':\n        document.body.style.backgroundImage = 'url(\"cloudy.jpg\")';\n        break;\n      case 'Rain':\n      case 'Drizzle':\n      case 'Mist':\n        document.body.style.backgroundImage = 'url(\"rain.jpg\")';\n        break;\n      case 'Thunderstorm':\n        document.body.style.backgroundImage = 'url(\"thunderstorm.jpg\")';\n        break;\n      case 'Snow':\n        document.body.style.backgroundImage = 'url(\"snow.jpg\")';\n        break;\n      default:\n        break;\n    }\n\n    const cityName = document.querySelector('[cityName]');\n    const cityTemperature = document.querySelector('[cityTemperature]');\n    const cityWeatherDescription = document.querySelector('[cityWeather]');\n    const tempFeeling = document.querySelector('[tempFeeling]');\n    const humidityMeter = document.querySelector('[humidity]');\n    const windMeter = document.querySelector('[wind]');\n    const weatherImg = document.getElementById('image');\n    const datePreview = document.querySelector('[date-time]');\n    const dateAndTime = data.timezone;\n    const weatherDescription = data.weather[0].description;\n    let temp = data.main.temp;\n    let tempFeel = data.main.feels_like;\n\n    cityName.innerHTML = `${data.name}, ${data.sys.country}`;\n    datePreview.innerHTML = getLocalTime(dateAndTime);\n\n    if (toggleSwitch.checked) {\n      temp = kelvinToFahrenheit(temp);\n      tempFeel = kelvinToFahrenheit(tempFeel);\n      cityTemperature.innerHTML = `${temp + '&degF'}`;\n    } else {\n      temp = kelvinToCelcius(temp);\n      tempFeel = kelvinToCelcius(tempFeel);\n      cityTemperature.innerHTML = `${temp + '&degC'}`;\n    }\n\n    weatherImg.src = `http://openweathermap.org/img/wn/${data.weather[0].icon}.png`;\n\n    cityWeatherDescription.innerHTML =\n      weatherDescription.charAt(0).toUpperCase() + weatherDescription.slice(1);\n\n    tempFeeling.innerHTML = `${'Feels like: '}${tempFeel + '&deg'}`;\n\n    humidityMeter.innerHTML = `${'Humidity levels: '}${\n      data.main.humidity + '%'\n    }`;\n    windMeter.innerHTML = `${'Wind: '}${data.wind.speed + 'k/m'}`;\n\n    toggleSwitch.addEventListener('change', () => {\n      if (toggleSwitch.checked) {\n        setTimeout(() => {\n          temp = toFahrenheit(temp);\n          tempFeel = toFahrenheit(tempFeel);\n          cityTemperature.innerHTML = `${temp + '&degF'}`;\n          tempFeeling.innerHTML = `${'Feels like: '}${tempFeel + '&deg'}`;\n        }, 150);\n      } else {\n        setTimeout(() => {\n          temp = toCelsius(temp);\n          tempFeel = toCelsius(tempFeel);\n          cityTemperature.innerHTML = `${temp + '&degC'}`;\n          tempFeeling.innerHTML = `${'Feels like: '}${tempFeel + '&deg'}`;\n        }, 150);\n      }\n    });\n  }\n\n  /* Temperature Converters*/\n  function kelvinToCelcius(temp) {\n    temp = parseFloat(temp);\n    temp = Math.round((temp = temp - 273.15));\n    return temp;\n  }\n  function kelvinToFahrenheit(temp) {\n    temp = parseFloat(temp);\n    temp = Math.round(((temp = temp - 273.15) * 9) / 5 + 32);\n    return temp;\n  }\n  function toFahrenheit(temp) {\n    temp = parseFloat(temp);\n    temp = Math.round((temp = temp * 1.8 + 32));\n    return temp;\n  }\n  function toCelsius(temp) {\n    temp = parseFloat(temp);\n    temp = Math.round((temp = (temp - 32) * (5 / 9)));\n    return temp;\n  }\n\n  /* Type of search function*/\n  function typeOfQuery(input) {\n    if (isNaN(input) && containsNumber(input)) {\n      searchTerm = input;\n    } else if (isANumber(input) && input.length <= 5) {\n      searchTerm = `${'zip='}${input}`;\n    } else {\n      searchTerm = `${'q='}${input}`;\n    }\n  }\n\n  /* Clear user input function*/\n  function clear() {\n    userEntry.value = '';\n  }\n\n  /* Is a number or doesn't contain a number functions */\n  function isANumber(input) {\n    return !/\\D/.test(input);\n  }\n  function containsNumber(input) {\n    return /\\d/.test(input);\n  }\n\n  /*Get local time function */\n  function getLocalTime(data) {\n    let date = new Date();\n    let time = date.getTime();\n    let localOffset = date.getTimezoneOffset() * 60000;\n    let utc = time + localOffset;\n    let localTime = utc + 1000 * data;\n    let localTimeDate = new Date(localTime);\n    return localTimeDate.toLocaleString();\n  }\n\n  getWeather(input);\n})();\n\n//# sourceURL=webpack://Weather-App/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;